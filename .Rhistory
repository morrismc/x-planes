runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
#################################### Extract 2018 ####################################
Homocides_2018 <- filter(Homocides, Year == 2018)
m <- leaflet(width = 400, height = 400) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircleMarkers(lng = Homocides_2018$Longitude,
lat = Homocides_2018$Latitude,
radius = 6)
m  # Print the map
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
#################################### Process data ####################################
# In this section, I want to convert from the date to Day of the Year
library(lubridate)
DayofYear <- data.frame(Day = rep(NA,nrow(Homocides_2018)),
ID = rep(NA,nrow(Homocides_2018)))
DayofYear[,1] <- yday(mdy_hms(Homocides_2018$Date))
DayofYear[,2] <- Homocides_2018$ID
Homocides_2018 <- merge(Homocides_2018, DayofYear, by = c("ID"))
runApp('Documents/GitHub/Chicago_shooting/Homocides')
help("unique")
unique(Homocides_2018$Year)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
unique(Homocides$Year)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
help selectInput()
help("selectInput")
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
#################################### Process data ####################################
# In this section, I want to convert from the date to Day of the Year
library(lubridate)
DayofYear <- data.frame(Day = rep(NA,nrow(Homocides)),
ID = rep(NA,nrow(Homocides)))
DayofYear[,1] <- yday(mdy_hms(Homocides$Date))
DayofYear[,2] <- Homocides$ID
Homocides_2018 <- merge(Homocides, DayofYear, by = c("ID"))
View(Homocides)
View(Homocides)
#################################### Process data ####################################
# In this section, I want to convert from the date to Day of the Year
library(lubridate)
DayofYear <- data.frame(Day = rep(NA,nrow(Homocides)),
ID = rep(NA,nrow(Homocides)))
DayofYear[,1] <- yday(mdy_hms(Homocides$Date))
DayofYear[,2] <- Homocides$ID
Homocides <- merge(Homocides, DayofYear, by = c("ID"))
View(Homocides)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
help("eventReactive")
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
help(addCircleMarkers)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
help("conditionalPanel")
help("absolutePanel")
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
plot(1,1)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
help(length)
sizeOf
help("size")
help("nrow")
runApp('Documents/GitHub/Chicago_shooting/Homocides')
help(plot)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
a
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
help(sum)
a
a <- 1
a <- a + 1
a
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
a = rep(0, 3)
a
a = rep(0, 366)
a[1,1]
a[1,]
typeof(a)
a[]
a[1]
a[2]
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
a <- [1:5,1]
a <- (1:5,1)
a <- (1:5)
a
a <- (1:5,1:5)
a <- (1:5)
a <- (1:366)
a
dim(a)
typeOf(a)
typeof(a)
help(cumsum)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
Homocides
url <- 'https://data.cityofchicago.org/api/views/k9xv-yxzs/rows.csv?accessType=DOWNLOAD'
x <- getURL(url)
Homocides <- read.csv(textConnection(x))
Homocides <- read.csv(textConnection(x))
View(Homocides)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
#################################### Process data ####################################
# In this section, I want to convert from the date to Day of the Year
library(lubridate)
DayofYear <- data.frame(Day = rep(NA,nrow(Homocides)),
ID = rep(NA,nrow(Homocides)))
DayofYear[,1] <- yday(mdy_hms(Homocides$Date))
DayofYear[,2] <- Homocides$ID
Homocides <- merge(Homocides, DayofYear, by = c("ID"))
runApp('Documents/GitHub/Chicago_shooting/Homocides')
vector(mode = 'string',length = 10)
vector(mode = 'any',length = 10)
vector(length = 10)
vector(mode = "list",length = 10)
#################################### SECTION TITLE ####################################
D <- data.frame(color = rep(NA,nrow(Homocides)))
for (r in 1:nrow(Homocides)) {
if(Homocides[r,3] == 'true'){
D[r,1] <- 'blue'
}
else {
D[r,1] <- 'red'
}
}
}
#################################### SECTION TITLE ####################################
D <- data.frame(color = rep(NA,nrow(Homocides)))
for (r in 1:nrow(Homocides)) {
if(Homocides[r,3] == 'true'){
D[r,1] <- 'blue'
}
else {
D[r,1] <- 'red'
}
}
View(D)
#################################### SECTION TITLE ####################################
D <- data.frame(color = rep(NA,nrow(Homocides)),
ID = rep(NA,nrow(Homocides)))
for (r in 1:nrow(Homocides)) {
if(Homocides[r,3] == 'true'){
D[r,1] <- 'blue'
D[r,2] <- Homocides[r,1]
}
else {
D[r,1] <- 'red'
D[r,2] <- Homocides[r,1]
}
}
View(D)
Homocides <- merge(Homocides, D, by = c("ID"))
View(Homocides)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
rm(DayofYear,D)
rm(DayofYear,D,Homocides_2018,m,a)
rm(DayofYear,D,Homocides_2018,m,a)
help(addLegend)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
View(Homocides)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
View(D)
View(D)
for (r in 1:nrow(Homocides_flt)){
if(Homocides_flt[r,23] == a){
D[r,2] <- D[r,2] + 1
}
else {
a <- a + 1
}
}
a = 1
for (r in 1:nrow(Homocides_flt)){
if(Homocides_flt[r,23] == a){
D[r,2] <- D[r,2] + 1
}
else {
a<- a + 1
}
}
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
View(D)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
View(D)
input
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
View(D)
Homocides_flt <- filter(Homocides,Year 2017)
Homocides_flt <- filter(Homocides,Year 2017)
Homocides_flt <- filter(Homocides,Year ==2017)
D <- data.frame(Day = rep(NA,365),
Homocide_cnt = rep(NA,365))
# Zip through all of the homocides and then calculate the number of
# homocides per day.
a = 1
for (r in 1:nrow(Homocides_flt)){
if(Homocides_flt[r,23] == a){
D[r,2] <- D[r,2] + 1
}
else {
a<- a + 1
}
}
View(D)
View(Homocides_flt)
Homocides_flt[r,23]
Homocides_flt[order(Day),]
Homocides_flt[order(Day),]
Homocides_flt[order(Day)=]
Homocides_flt[order(Day)]
Homocides_flt[order(Homocides_flt$Day,)]
example(order)
help(order)
Homocides_flt[order(day),]
Homocides_flt[order(Day),]
Data <- Homocides_flt[order(Day),]
Data <- Homocides_flt[order(Homocides_flt$Day),]
View(Data)
Homocides_flt <- Homocides_flt[order(Homocides_flt$Day),]
a = 1
for (r in 1:nrow(Homocides_flt)){
if(Homocides_flt[r,23] == a){
D[r,2] <- D[r,2] + 1
}
else {
a<- a + 1
}
}
View(D)
a = 1
for (r in 1:nrow(Homocides_flt)){
if(Homocides_flt[r,23] == a){
D[a,2] <- D[a,2] + 1
}
else {
a<- a + 1
}
}
a = 1
for (r in 1:nrow(Homocides_flt)){
if(Homocides_flt[r,23] == a){
D[a,2] <- D[a,2] + 1
}
else {
D[a,1] <- a
a<- a + 1
}
}
r = 1
a = 1
if(Homocides_flt[r,23] == a)
{}
Homocides_flt[r,23] == a
D[a,2]
D[a,2] + 1
D <- data.frame(Day = rep(NA,365),
Homocide_cnt = rep(0,365))
a = 1
for (r in 1:nrow(Homocides_flt)){
if(Homocides_flt[r,23] == a){
D[a,2] <- D[a,2] + 1
}
else {
D[a,1] <- a
a<- a + 1
}
}
plot(D$Day,D$Homocide_cnt)
cumsum(D$Homocide_cnt)
plot(D$Day,cumsum(D$Homocide_cnt))
D$Homocide_cnt = cumsum(D$Homocide_cnt)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
View(D)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
library(`agTrend-master`)
library(`agTrend`)
library(`agTrend-master`)
library(agTrend)
library(bsts)
help(bsts)
## Example 8: Non-Gaussian data
## Poisson counts of shark attacks in Florida.
data(shark)
logshark <- log1p(shark$Attacks)
ss.level <- AddLocalLevel(list(), y = logshark)
model <- bsts(shark$Attacks, ss.level, niter = 500,
ping = 250, family = "poisson", seed = 8675309)
plot(model)
plot(model,'components')
# Poisson data can have an 'exposure' as the second column of a
## two-column matrix.
model <- bsts(cbind(shark$Attacks, shark$Population / 1000),
state.specification = ss.level, niter = 500,
family = "poisson", ping = 250, seed = 8675309)
plot(model)
MakePlots <- function(model, ask = TRUE) {
## Make all the plots callable by plot.bsts.
opar <- par(ask = ask)
on.exit(par(opar))
plot.types <- c("state", "components", "residuals",
"prediction.errors", "forecast.distribution")
for (plot.type in plot.types) {
plot(model, plot.type)
}
if (model$has.regression) {
regression.plot.types <- c("coefficients", "predictors", "size")
for (plot.type in regression.plot.types) {
plot(model, plot.type)
}
}
}
MakePlots(model)
trend <- cumsum(rnorm(number.of.time.points, 0, sigma.level))
predictors <- matrix(rnorm(total.sample.size * 2), ncol = 2)
colnames(predictors) <- c("X1", "X2")
coefficients <- c(-10, 10)
regression <- as.numeric(predictors %*% coefficients)
y.hat <- rep(trend, sample.size.per.time.point) + regression
y <- rnorm(length(y.hat), y.hat, sigma.obs)
data(iclaims)
ss <- AddLocalLinearTrend(list(), initial.claims$iclaimsNSA)
ss <- AddSeasonal(ss, initial.claims$iclaimsNSA, nseasons = 52)
model <- bsts(iclaimsNSA ~ ., state.specification = ss, data =
initial.claims, niter = 1000)
plot(model)
plot(model, "components")
plot(model, "coefficients")
plot(model, "predictors")
plot(model)
library(BLR)
help(BLR)
install.packages("bayesplot")
install.packages("rstanarm")
library("bayesplot")
library("rstanarm")
library("ggplot2")
fit <- stan_glm(mpg ~ ., data = mtcars)
posterior <- as.matrix(fit)
plot_title <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(posterior,
pars = c("cyl", "drat", "am", "wt"),
prob = 0.8) + plot_title
color_scheme_set("red")
ppc_dens_overlay(y = fit$y,
yrep = posterior_predict(fit, draws = 50))
color_scheme_set("red")
ppc_dens_overlay(y = fit$y,
yrep = posterior_predict(fit, draws = 150))
fit <- stan_glm(mpg ~ wt, data = mtcars)
posterior <- as.matrix(fit)
plot_title <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(posterior,
pars = c("cyl", "drat", "am", "wt"),
prob = 0.8) + plot_title
plot_title <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(posterior,
pars = c("wt"),
prob = 0.8) + plot_title
color_scheme_set("red")
ppc_dens_overlay(y = fit$y,
yrep = posterior_predict(fit, draws = 50))
#################################### Set dir and load ####################################
# This script was written on November 2, 2018 by Matthew Morriss for
# The purpose of downloading Xplane data from wikipedia and plotting.
setwd('/Users/matthew/Documents/GitHub/X-Planes')
rm(list = ls())
library(tidyverse)
library(ggplot2)
# library(xlsx)
library(ggalt)
library(scales)
library(gridExtra)
library(rvest)
library(plyr)
library(stringr)
library(textclean)
library(XML)
library(lubridate)
library(htmltab)
library(viridis)
library(htmltools)
library(webshot)
library(bsts)
library(extrafont)
#################################### load Data ####################################
#Download X1
X1 <-  htmltab('https://en.wikipedia.org/wiki/List_of_X-1_flights',3)
X1 <- X1[!(X1[,6] == "?"),]
X1$Date <- gsub(",",'',X1$Date)
X1$Date <- mdy(X1$Date)
X1$`Velocity-Mach-` <-  as.numeric(X1$`Velocity-Mach-`)
# Download X2
X2 <- htmltab('https://en.wikipedia.org/wiki/List_of_X-2_flights',2)
X2 <- X2[!(X2[,6] == "?"),]
X2$`Velocity-Mach-` <- gsub('\\+','',X2$`Velocity-Mach-`)
X2$`Velocity-Mach-` <-  as.numeric(X2$`Velocity-Mach-`)
X2$Date <- mdy(X2$Date)
#Download X15
X15 <- htmltab('https://en.wikipedia.org/wiki/List_of_X-15_flights',2)
X15$Date <- mdy(X15$Date)
X15$Mach <-  as.numeric(X15$Mach)
X15$`Altitude (m)` <- gsub(',','',X15$`Altitude (m)`)
X15$`Altitude (m)` <- as.numeric(X15$`Altitude (m)`)
#################################### Plot year v altitude ####################################
s <- ggplot(X15, aes(x = X15$Date, y = X15$`Altitude (m)`,
color = X15$Mach))+
geom_point(size = 2)+
theme_classic()+
scale_y_continuous(name ='Altitude (m)',
breaks = pretty(X15$`Altitude (m)`, n = 10))+
labs(x = 'Date (yr)', color = 'Mach')+
theme(text = element_text(size = 16, family = 'Times')) +
# scale_color_brewer(palette = 'Set1')
# scale_fill_brewer(palette = "Set1")
# scale_color_manual( values=c("red","green","blue"))
scale_colour_gradient2()
s
#################################### Plot year v X-15 ####################################
s <- ggplot(X15, aes(x = X15$Date, y = X15$`Altitude (m)`,
color = X15$Mach))+
geom_point(size = 2)+
theme_classic()+
scale_y_continuous(name ='Altitude (m)',
breaks = pretty(X15$`Altitude (m)`, n = 10))+
labs(x = 'Date (yr)', color = 'Mach')+
theme(text = element_text(size = 16, family = 'Times')) +
# scale_color_brewer(palette = 'Set1')
# scale_fill_brewer(palette = "Set1")
# scale_color_manual( values=c("red","green","blue"))
scale_colour_gradient2()
s
#################################### X-15 mach v altitude####################################
m <- ggplot(X15, aes(x = X15$Mach, y = X15$`Altitude (m)`))+
geom_point()+
#################################### X-15 mach v altitude####################################
m <- ggplot(X15, aes(x = X15$Mach, y = X15$`Altitude (m)`))+
geom_point()+
labs(x = 'Mach #',y = 'Altitude (m)')
#################################### X-15 mach v altitude####################################
m <- ggplot(X15, aes(x = X15$Mach, y = X15$`Altitude (m)`))+
geom_point()+
labs(x = 'Mach #',y = 'Altitude (m)')
m
#################################### X-15 mach v altitude####################################
m <- ggplot(X15, aes(x = X15$Mach, y = X15$`Altitude (m)`))+
geom_point()+
them_classic()+
labs(x = 'Mach #',y = 'Altitude (m)')
m
#################################### X-15 mach v altitude####################################
m <- ggplot(X15, aes(x = X15$Mach, y = X15$`Altitude (m)`))+
geom_point()+
theme_classic()+
labs(x = 'Mach #',y = 'Altitude (m)')
m
#################################### X-15 mach v altitude####################################
m <- ggplot(X15, aes(x = X15$Mach, y = X15$`Altitude (m)`))+
geom_point()+
theme_classic()+
labs(x = 'Mach #',y = 'Altitude (m)',
title = 'X-15 test')
m
#################################### X-15 mach v altitude####################################
m <- ggplot(X15, aes(x = X15$Mach, y = X15$`Altitude (m)`))+
geom_point()+
theme_classic()+
theme(text = element_text(size = 16, family = 'Times')) +
labs(x = 'Mach #',y = 'Altitude (m)',
title = 'X-15 test')
m
